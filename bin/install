var async = require('async');
var prompt = require('prompt');
var crypto = require('crypto');
var config = require('../config');
var mongoclient = require('mongodb').MongoClient;
var fs = require('fs');
var db;
prompt.message = "> ".green;
prompt.delimiter = "";
prompt.start();

function generateId(lngth) {
	if (!lngth) {
		lngth = 16;
	}
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    for( var i=0; i < lngth; i++ )
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    return text;
}

async.series([
		function (callback) {
			console.log("This script will guide you with TaracotJS basic installation steps.\n");
			console.log("Database connection is required.");
			console.log("Current MongoDB URL: " + config.mongo.url + "\n");
			prompt.get(['Continue? y/n'], function (err, result) {
				if (!err && result && 'Continue? y/n' in result && result['Continue? y/n'] == 'y') {
					callback();
				} else {
					console.log("\n\nAborted");
					process.exit(code = 0);
				}
			});
		},
		function (callback) {
			mongoclient.connect(config.mongo.url, config.mongo_options, function (err, _db) {
				if (err) {
					console.log("\nCould not connect to the MongoDB. Please check config.js");
					console.log(err);
					process.exit(1);
				}
				console.log("\nConnected to MongoDB\n");
				db = _db;
				callback();
			});
		},
		function (callback) {
			prompt.get(['Generate secrets and salt? y/n'], function (err, result) {
				if (!err && result && 'Generate secrets and salt? y/n' in result && result['Generate secrets and salt? y/n'] == 'y') {
					config.cookie_secret = generateId(32);
					config.session_secret = generateId(32);
					config.salt = generateId(64);
					fs.writeFile('../config.js', 'var config = ' + JSON.stringify(config, null, "\t") + ";\n\nmodule.exports = config;", function (err) {
						if (err) {
							console.log("\nCould not save config.js file. Check your permissions");
							console.log(err);
							process.exit(1);
						}
						console.log("... success");
						callback();
					});
				} else {
					console.log("\nNote: it's important to set these values for security purposes!");
					callback();
				}
			});
		},
		function (callback) {
			console.log("\nCreating collection: users\n");
			db.createCollection('users', function (err, collection) {
				if (err) {
					console.log("... failed");
					console.log(err);
					process.exit(1);
				}
				console.log("... success");
				callback();
			});
		},
		function (callback) {
			db.collection('users').remove( { username : 'admin' }, function () {
				callback();
			});
		},
		function (callback) {
			console.log("\nCreating default user account\n");
			var md5 = crypto.createHash('md5');
			var password_md5 = md5.update(config.salt + '.admin').digest('hex');			
			db.collection('users').insert({
					username: 'admin',
					email: 'default@taracot.org',
					realname: 'Website Administrator',
					status: 2,
					password: password_md5
				}, function (err) {
					if (err) {
						console.log("... failed");
						console.log(err);
						process.exit(1);
					}
					console.log("... success");
					callback();
				});
		},
		function (callback) {
			console.log("\nCreating index for collection: users\n");
			db.ensureIndex('users', {
				username: 1
			}, {
				unique: true,
				background: true,
				dropDups: true,
				w: 1
			}, function (err, indexName) {
				if (err) {
					console.log("... failed");
					console.log(err);
					process.exit(1);
				}
				console.log("... OK (1/3)");
				callback();
			});
		},
		function (callback) {
			db.ensureIndex('users', {
				email: 1
			}, {
				unique: true,
				background: true,
				dropDups: true,
				w: 1
			}, function (err, indexName) {
				if (err) {
					console.log("... failed");
					console.log(err);
					process.exit(1);
				}
				console.log("... OK (2/3)");
				callback();
			});
		},
		function (callback) {
			db.ensureIndex('users', {
				realname: 1
			}, {
				unique: false,
				background: true,
				dropDups: false,
				w: 1
			}, function (err, indexName) {
				if (err) {
					console.log("... failed");
					console.log(err);
					process.exit(1);
				}
				console.log("... OK (3/3)");
				callback();
			});
		},
		function (callback) {
			console.log("\nCreating collection: settings\n");
			db.createCollection('settings', function (err, collection) {
				if (err) {
					console.log("... failed");
					console.log(err);
					process.exit(1);
				}
				console.log("... success");
				callback();
			});
		},
		function (callback) {
			console.log("\nAdding default setting (site_title)...\n");
			db.collection('settings').insert({
					oname: 'site_title',
					ovalue: 'Taracot JS',
					olang: 'en'
				}, function (err) {
					if (err) {
						console.log("... failed");
						console.log(err);
						process.exit(1);
					}
					console.log("... success");
					callback();
				});
		},
		function (callback) {
			console.log("\nCreating index for collection: settings\n");
			db.ensureIndex('settings', {
				oname: 1
			}, {
				unique: false,
				background: true,
				dropDups: false,
				w: 1
			}, function (err, indexName) {
				if (err) {
					console.log("... failed");
					console.log(err);
					process.exit(1);
				}
				console.log("... OK (1/3)");
				callback();
			});
		},
		function (callback) {
			db.ensureIndex('settings', {
				ovalue: 1
			}, {
				unique: false,
				background: true,
				dropDups: false,
				w: 1
			}, function (err, indexName) {
				if (err) {
					console.log("... failed");
					console.log(err);
					process.exit(1);
				}
				console.log("... OK (2/3)");
				callback();
			});
		},
		function (callback) {
			db.ensureIndex('settings', {
				olang: 1
			}, {
				unique: false,
				background: true,
				dropDups: false,
				w: 1
			}, function (err, indexName) {
				if (err) {
					console.log("... failed");
					console.log(err);
					process.exit(1);
				}
				console.log("... OK (3/3)");
				callback();
			});
		},
		function (callback) {
			console.log("\nCreating collection: pages\n");
			db.createCollection('pages', function (err, collection) {
				if (err) {
					console.log("... failed");
					console.log(err);
					process.exit(1);
				}
				console.log("... success");
				callback();
			});
		},
		function (callback) {
			console.log("\nAdding default page...\n");
			db.collection('pages').insert({
					ptitle: 'Default page',
					pfolder: '/',
					pfilename: '',
					plang: 'en',
					playout: config.layouts.default,
					pfolder_id: 'j1_1',
					pkeywords: 'sample, keywords, here',
					pdesc: 'This is the sample page',
					pcontent: 'As you see this, the installation seems to be completed ;-)'
				}, function (err) {
					if (err) {
						console.log("... failed");
						console.log(err);
						process.exit(1);
					}
					console.log("... success");
					callback();
				});
		},
		function (callback) {
			console.log("\nCreating index for collection: pages\n");
			db.ensureIndex('pages', {
				ptitle: 1
			}, {
				unique: false,
				background: true,
				dropDups: false,
				w: 1
			}, function (err, indexName) {
				if (err) {
					console.log("... failed");
					console.log(err);
					process.exit(1);
				}
				console.log("... OK (1/4)");
				callback();
			});
		},
		function (callback) {
			db.ensureIndex('pages', {
				pfolder: 1
			}, {
				unique: false,
				background: true,
				dropDups: false,
				w: 1
			}, function (err, indexName) {
				if (err) {
					console.log("... failed");
					console.log(err);
					process.exit(1);
				}
				console.log("... OK (2/4)");
				callback();
			});
		},
		function (callback) {
			db.ensureIndex('pages', {
				pfilename: 1
			}, {
				unique: false,
				background: true,
				dropDups: false,
				w: 1
			}, function (err, indexName) {
				if (err) {
					console.log("... failed");
					console.log(err);
					process.exit(1);
				}
				console.log("... OK (3/4)");
				callback();
			});
		},
		function (callback) {
			db.ensureIndex('pages', {
				plang: 1
			}, {
				unique: false,
				background: true,
				dropDups: false,
				w: 1
			}, function (err, indexName) {
				if (err) {
					console.log("... failed");
					console.log(err);
					process.exit(1);
				}
				console.log("... OK (4/4)");
				callback();
			});
		},
		function (callback) {
			console.log("\nCreating collection: pages_folders\n");
			db.createCollection('pages_folders', function (err, collection) {
				if (err) {
					console.log("... failed");
					console.log(err);
					process.exit(1);
				}
				console.log("... success");
				callback();
			});
		},
		function (callback) {
			console.log("\nAdding default folder tree for pages module...\n");
			db.collection('pages_folders').insert({
					oname: 'folders_json',
					ovalue: '[{"id":"j1_1","text":"/","data":null,"parent":"#","type":"root"}]'
				}, function (err) {
					if (err) {
						console.log("... failed");
						console.log(err);
						process.exit(1);
					}
					console.log("... success");
					callback();
				});
		},
		function (callback) {
			console.log("\nCreating index for collection: pages_folders\n");
			db.ensureIndex('pages_folders', {
				oname: 1
			}, {
				unique: false,
				background: true,
				dropDups: false,
				w: 1
			}, function (err, indexName) {
				if (err) {
					console.log("... failed");
					console.log(err);
					process.exit(1);
				}
				console.log("... OK (1/2)");
				callback();
			});
		},
		function (callback) {
			db.ensureIndex('pages_folders', {
				ovalue: 1
			}, {
				unique: false,
				background: true,
				dropDups: false,
				w: 1
			}, function (err, indexName) {
				if (err) {
					console.log("... failed");
					console.log(err);
					process.exit(1);
				}
				console.log("... OK (2/2)");
				callback();
			});
		}
	],
	function (err) {
		if (err) {
			console.log("\nInstallation failed");
			console.log(err);
			process.exit(1);
		}
		console.log("\nFinished");
		process.exit(code = 0);
	}
);