#!/usr/bin/env node

var program = require('commander');
var async = require('async');
var crypto = require('crypto');
var config = require('../config');
var mongoclient = require('mongodb').MongoClient;
var fs = require('fs');
var db;

program
    .version(config.taracotjs)
    .option('-m, --mongo [url]', 'Specify MongoDB connect URL')
    .option('-r, --redishost [host]', 'Specify Redis host')
    .option('-j, --redisport [port]', 'Specify Redis port')
    .option('-p, --port [port]', 'Specify TaracotJS server port')
    .option('-u, --update', 'Version update (no database insertions)')
    .option('-i, --uid [uid]', 'Set user ID')
    .option('-g, --gid [gid]', 'Set group ID')
    .option('-s, --silent', 'Don\'t ask anything (perform silently)')
    .option('-d, --demo', 'Set demo server options (you won\'t need this)')
    .parse(process.argv);

var mongo_url = program.mongo || config.mongo.url;
var redis_host = program.redishost || config.redis.host;
var redis_port = program.redisport || config.redis.port;
var port = program.port || config.port;
var uid = program.uid || config.uid;
var gid = program.gid || config.gid;

async.series([
        function(callback) {
            console.log("This script will guide you with TaracotJS basic installation steps.\n");
            console.log("Database connection is required.");
            console.log("Current MongoDB URL: " + mongo_url + "\n");
            if (program.silent) return callback();
            program.confirm('Continue? ', function(ok) {
                if (ok) {
                    callback();
                } else {
                    console.log("\n\nAborted");
                    process.exit(code = 0);
                }
            });
        },
        function(callback) {
            mongoclient.connect(mongo_url, config.mongo_options, function(err, _db) {
                if (err) {
                    console.log("\nCould not connect to the MongoDB. Please check config.js");
                    console.log(err);
                    process.exit(1);
                }
                console.log("\nConnected to MongoDB\n");
                db = _db;
                callback();
            });
        },
        function(callback) {
            if (program.demo) {
                config.captcha = "captcha_gm";
                config.graphicsmagick = true;
                console.log("Saving demo server-related changes to config.js file\n");
                fs.writeFile('../config.js', 'var config = ' + JSON.stringify(config, null, "\t") + ";\n\nmodule.exports = config;", function(err) {
                    if (err) {
                        console.log("\nCould not save config.js file. Check your permissions");
                        console.log(err);
                        process.exit(1);
                    }
                    console.log("... success\n");
                    callback();
                });
            } else {
                callback();
            }
        },
        function(callback) {
            if (mongo_url != config.mongo.url || redis_host != config.redis.host || redis_port != config.redis.port || port != config.port || gid != config.gid || uid != config.uid) {
                config.mongo.url = mongo_url;
                config.redis.host = redis_host;
                config.redis.port = redis_port;
                config.port = port;
                config.uid = uid;
                config.gid = gid;
                console.log("Saving changes to config.js file\n");
                fs.writeFile('../config.js', 'var config = ' + JSON.stringify(config, null, "\t") + ";\n\nmodule.exports = config;", function(err) {
                    if (err) {
                        console.log("\nCould not save config.js file. Check your permissions");
                        console.log(err);
                        process.exit(1);
                    }
                    console.log("... success\n");
                    callback();
                });
            } else {
                callback();
            }
        },
        function(callback) {
            if (program.update) return callback();
            if (program.silent) return callback();
            program.confirm('Installation script can update secrets and salt. Continue? ', function(ok) {
                if (ok) {
                    config.cookie_secret = generateId(32);
                    config.session_secret = generateId(32);
                    config.salt = generateId(64);
                    fs.writeFile('../config.js', 'var config = ' + JSON.stringify(config, null, "\t") + ";\n\nmodule.exports = config;", function(err) {
                        if (err) {
                            console.log("\nCould not save config.js file. Check your permissions");
                            console.log(err);
                            process.exit(1);
                        }
                        console.log("... success");
                        callback();
                    });
                } else {
                    console.log("\nNote: it's important to set these values for security purposes!");
                    callback();
                }
            });
        },
        function(callback) {
            console.log("\nCreating collection: users\n");
            db.createCollection('users', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            db.collection('users').remove({
                username: 'admin'
            }, function() {
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nCreating default user account\n");
            var md5 = crypto.createHash('md5');
            var password_md5 = md5.update(config.salt + '.admin').digest('hex');
            db.collection('users').insert({
                username: 'admin',
                username_auth: 'admin',
                email: 'default@taracot.org',
                realname: 'Website Administrator',
                status: 2,
                regdate: Date.now(),
                password: password_md5
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: users\n");
            ensure_indexes('users', ['username', 'email', 'realname', 'status'], null, null, function() {
                ensure_indexes('users', ['act_code', 'res_code', 'username_auth', 'password', 'username_vk_uid'], null, true, function() {
                    console.log("... success");
                    callback();
                });
            });
        },
        function(callback) {
            console.log("\nCreating collection: settings\n");
            db.createCollection('settings', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default setting (site_title)...\n");
            db.collection('settings').insert({
                oname: 'site_title',
                ovalue: 'Taracot JS',
                olang: 'en'
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default setting (site_keywords)...\n");
            db.collection('settings').insert({
                oname: 'site_keywords',
                ovalue: 'taracot, taracotjs, node.js, mongodb, redis, cms, content management system',
                olang: 'en'
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default setting (site_description)...\n");
            db.collection('settings').insert({
                oname: 'site_description',
                ovalue: 'TaracotJS is a simple content management system (CMS) written in JavaScript on both client and server sides (using Node). It\'s free, open source and is running on multiple platrforms including Linux, MacOS and Windows. All modern browsers are supported.',
                olang: 'en'
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default setting (blog_mode)...\n");
            db.collection('settings').insert({
                oname: 'blog_mode',
                ovalue: 'moderation',
                olang: ''
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default setting (blog_areas)...\n");
            db.collection('settings').insert({
                oname: 'blog_areas',
                ovalue: '[{"id":"test","en":"Test blog area","ru":""}]',
                olang: ''
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: settings\n");
            ensure_indexes('settings', ['oname', 'ovalue', 'olang'], null, null, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: pages\n");
            db.createCollection('pages', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default page...\n");
            db.collection('pages').insert({
                ptitle: 'Default page',
                pfolder: '/',
                pfilename: '',
                plang: 'en',
                playout: config.layouts.default,
                pfolder_id: 'j1_1',
                pkeywords: 'sample, keywords, here',
                pdesc: 'This is the sample page',
                pcontent: 'The installation is complete ;-)'
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: pages\n");
            ensure_indexes('pages', ['pfolder', 'pfilename', 'plang', 'ptitle'], null, null, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: pages_folders\n");
            db.createCollection('pages_folders', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default folder tree for pages module...\n");
            db.collection('pages_folders').insert({
                oname: 'folders_json',
                ovalue: '[{"id":"j1_1","text":"/","data":null,"parent":"#","type":"root"}]'
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: pages_folders\n");
            ensure_indexes('pages_folders', ['oname', 'ovalue'], null, null, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: parts\n");
            db.createCollection('parts', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default item to parts collection...\n");
            db.collection('parts').insert({
                pname: 'test',
                plang: 'en',
                pvalue: 'Just a test example'
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: parts\n");
            ensure_indexes('parts', ['pname', 'plang'], null, true, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: menu\n");
            db.createCollection('pages_folders', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            if (program.update) return callback();
            console.log("\nAdding default item to menu collection...\n");
            db.collection('menu').insert({
                "lang": "en",
                "menu_source": "<li id=\"taracot_menu_1408371943280\" class=\"uk-nestable-list-item\"><div class=\"uk-nestable-item\"><div class=\"uk-nestable-handle\"></div><div data-nestable-action=\"toggle\"></div>&nbsp;<span class=\"uk-nestable-item-text\">Home</span>&nbsp;(<a href=\"/\" class=\"uk-nestable-item-url\">/</a>)&nbsp;&nbsp;&nbsp;<button class=\"uk-button uk-button-small taracot-btn-menu-edit\"><i class=\"uk-icon-edit\"></i></button>&nbsp;<button class=\"uk-button uk-button-small uk-button-danger taracot-btn-menu-delete\"><i class=\"uk-icon-trash-o\"></i></button></div></li><li id=\"taracot_menu_1413378176219\" class=\"uk-nestable-list-item\"><div class=\"uk-nestable-item\"><div class=\"uk-nestable-handle\"></div><div data-nestable-action=\"toggle\"></div>&nbsp;<span class=\"uk-nestable-item-text\">Blog feed</span>&nbsp;(<a href=\"/blog\" class=\"uk-nestable-item-url\">/blog</a>)&nbsp;&nbsp;&nbsp;<button class=\"uk-button uk-button-small taracot-btn-menu-edit\"><i class=\"uk-icon-edit\"></i></button>&nbsp;<button class=\"uk-button uk-button-small uk-button-danger taracot-btn-menu-delete\"><i class=\"uk-icon-trash-o\"></i></button></div></li><li id=\"taracot_menu_1413378845428\" class=\"uk-nestable-list-item\"><div class=\"uk-nestable-item\"><div class=\"uk-nestable-handle\"></div><div data-nestable-action=\"toggle\"></div>&nbsp;<span class=\"uk-nestable-item-text\">New post</span>&nbsp;(<a href=\"/blog/post\" class=\"uk-nestable-item-url\">/blog/post</a>)&nbsp;&nbsp;&nbsp;<button class=\"uk-button uk-button-small taracot-btn-menu-edit\"><i class=\"uk-icon-edit\"></i></button>&nbsp;<button class=\"uk-button uk-button-small uk-button-danger taracot-btn-menu-delete\"><i class=\"uk-icon-trash-o\"></i></button></div></li><li id=\"taracot_menu_1413378186758\" class=\"uk-nestable-list-item\"><div class=\"uk-nestable-item\"><div class=\"uk-nestable-handle\"></div><div data-nestable-action=\"toggle\"></div>&nbsp;<span class=\"uk-nestable-item-text\">Social</span>&nbsp;(<a href=\"/social\" class=\"uk-nestable-item-url\">/social</a>)&nbsp;&nbsp;&nbsp;<button class=\"uk-button uk-button-small taracot-btn-menu-edit\"><i class=\"uk-icon-edit\"></i></button>&nbsp;<button class=\"uk-button uk-button-small uk-button-danger taracot-btn-menu-delete\"><i class=\"uk-icon-trash-o\"></i></button></div></li>",
                "menu_raw": "<ul><li class=\"taracot_menu_item_\"><a href=\"/\">Home</a></li><li class=\"taracot_menu_item_blog\"><a href=\"/blog\">Blog feed</a></li><li class=\"taracot_menu_item_blog_post\"><a href=\"/blog/post\">New post</a></li><li class=\"taracot_menu_item_social\"><a href=\"/social\">Social</a></li></ul>",
                "menu_uikit": "<nav class=\"uk-navbar\"><ul class=\"uk-navbar-nav\"><li class=\"taracot_menu_item_\"><a href=\"/\">Home</a></li><li class=\"taracot_menu_item_blog\"><a href=\"/blog\">Blog feed</a></li><li class=\"taracot_menu_item_blog_post\"><a href=\"/blog/post\">New post</a></li><li class=\"taracot_menu_item_social\"><a href=\"/social\">Social</a></li></ul></nav>",
                "menu_uikit_offcanvas": "<li class=\"taracot_menu_item_\"><a href=\"/\">Home</a></li><li class=\"taracot_menu_item_blog\"><a href=\"/blog\">Blog feed</a></li><li class=\"taracot_menu_item_blog_post\"><a href=\"/blog/post\">New post</a></li><li class=\"taracot_menu_item_social\"><a href=\"/social\">Social</a></li>"
            }, function(err) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: menu\n");
            ensure_indexes('menu', ['lang'], null, true, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: statistics\n");
            db.createCollection('statistics', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: statistics\n");
            ensure_indexes('statistics', ['day'], null, true, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: search_index\n");
            db.createCollection('search_index', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: search_index\n");
            ensure_indexes('search_index', ['swords', 'space', 'item_id'], null, true, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: blog\n");
            db.createCollection('blog', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: blog\n");
            ensure_indexes('blog', ['post_timestamp'], null, null, function() {
                ensure_indexes('blog', ['post_moderated', 'post_filtered', 'post_draft', 'post_user_id', 'post_keywords', 'post_area', 'post_lang'], null, true, function() {
                    console.log("... success");
                    callback();
                });
            });
        },
        function(callback) {
            console.log("\nCreating collection: blog_comments\n");
            db.createCollection('blog_comments', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: blog_comments\n");
            ensure_indexes('blog_comments', ['post_id', 'comment_timestamp'], null, true, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: social_friends\n");
            db.createCollection('social_friends', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: social_friends\n");
            ensure_indexes('social_friends', ['u1', 'u2', 'friends'], null, true, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: social_conversations\n");
            db.createCollection('social_conversations', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: social_conversations\n");
            ensure_indexes('social_conversations', ['u1', 'u2'], null, true, function() {
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating collection: social_messages\n");
            db.createCollection('social_messages', function(err, collection) {
                if (err) {
                    console.log("... failed");
                    console.log(err);
                    process.exit(1);
                }
                console.log("... success");
                callback();
            });
        },
        function(callback) {
            console.log("\nCreating indexes for collection: social_messages\n");
            ensure_indexes('social_messages', ['last_tstamp'], null, null, function() {
                ensure_indexes('social_messages', ['u1', 'u2', 'tstamp'], null, true, function() {
                    console.log("... success");
                    callback();
                });
            });
        }

    ],
    function(err) {
        if (err) {
            console.log("\nInstallation failed");
            console.log(err);
            process.exit(1);
        }
        console.log("\nFinished");
        process.exit(code = 0);
    }
);

/*

 Helper functions

*/

var dummy = function() {};

function generateId(lngth) {
    if (!lngth) {
        lngth = 16;
    }
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    for (var i = 0; i < lngth; i++)
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    return text;
}

function ensure_indexes(col, ia, _opt, ow, callback) {
    var opt = {
        unique: false,
        background: true,
        dropDups: false,
        w: 1
    };
    if (_opt) opt = _opt;
    var _fns = [];
    for (var i = 0; i < ia.length; i++) {
        var i1 = {};
        i1[ia[i]] = 1;
        _fns.push({
            col: col,
            ix: i1
        });
        if (!ow) {
            var i2 = {};
            i2[ia[i]] = -1;
            _fns.push({
                col: col,
                ix: i2
            });
        }
    }
    async.every(_fns, function(fns, _callback) {
        db.collection(fns.col).ensureIndex(fns.ix, function() {
            _callback(true);
        });
    }, function(result) {
        callback();
    });
}
