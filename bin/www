#!/usr/bin/env node

var config = require('../config'),
    version = require('../version');

var app = require('../app'),
    http = require('http').Server(app),
    io = require('socket.io')(http),
    io_redis = require('socket.io-redis'),
    port = config.port || process.env.PORT || 3000,
    redis_client = app.get('redis_client');

if (config.redis.active)
    io.adapter(io_redis({
        host: config.redis.host,
        port: config.redis.port,
        key: config.redis.prefix + '_socket_io'
    }));

var server = http.listen(port, function() {
    if (config.gid) process.setgid(config.gid);
    if (config.uid) process.setuid(config.uid);
    console.log('[%s] server listening on port: ' + port, process.pid);
});

io.on('connection', function(socket) {

    socket.on('set_session', function(userid, userid_hash) {
        if (userid && userid.match(/^[0-9a-z]{24}$/) && userid_hash && userid_hash.match(/^[0-9a-z]{32}$/)) {
            var sid = userid + userid_hash;
            redis_client.set('taracot_socketio_online_' + userid, 1);
            socket.broadcast.emit('taracot_user_online', { id: userid });
            redis_client.get('taracot_socketio_sessions_' + sid, function(err, _sessions) {
                var sessions = [];
                if (_sessions) sessions = _sessions.split(',');
                sessions.push(socket.id);
                redis_client.set('taracot_socketio_sessions_' + sid, sessions.join(','));
                redis_client.set('taracot_socketio_sid_' + socket.id, sid);
            });
        }
    });

    socket.on('disconnect', function() {
        if (socket.id)
            redis_client.get('taracot_socketio_sid_' + socket.id, function(err, _sid) {
                if (!_sid) return;
                var _userid = _sid.substr(0, 24);
                socket.broadcast.emit('taracot_user_offline', { id: _userid });
                redis_client.set('taracot_socketio_online_' + _userid, 0);
                redis_client.get('taracot_socketio_sessions_' + _sid, function(err, _sessions) {
                    if (!_sessions) return;
                    var sessions = _sessions.split(',');
                    for (var i = 0; i < sessions.length; i++)
                        if (!io.sockets.connected[sessions[i]]) sessions.splice(i, 1);
                    redis_client.set('taracot_socketio_sessions_' + _sid, sessions.join(','));
                    redis_client.del('taracot_socketio_sid_' + socket.id);
                });
            });
    });

});

app.set('socket.io', io);